from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from config import BOT_TOKEN, ADMIN_CHAT_ID

# –°—Ç–∞–Ω–∏ –¥–ª—è –∑–∞—è–≤–∫–∏
ASK_NAME, ASK_PHONE = range(2)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", callback_data='leave_request')],
        [InlineKeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é", callback_data='get_info')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'leave_request':
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:")
        return ASK_NAME
    elif query.data == 'get_info':
        await query.message.reply_text(
            "‚ÑπÔ∏è –ú–∏ –Ω–∞–¥–∞—î–º–æ XYZ. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –∑–∞—è–≤–∫—É.\n\n(—Ç—É—Ç –º–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª)"
        )
        # –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É:
        # with open('info.pdf', 'rb') as f:
        #     await query.message.reply_document(document=InputFile(f))
        return ConversationHandler.END

# –ó–∞–ø–∏—Ç —ñ–º–µ–Ω—ñ
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return ASK_PHONE

# –ó–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞
async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    name = context.user_data['name']
    phone = context.user_data['phone']

    msg = f"üì© –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n\nüë§ –Ü–º‚Äô—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)

    await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == '__main__':
    main()